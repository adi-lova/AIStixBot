from aiogram import Router, types
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from bot.keyboards.filters import style_keyboard, background_keyboard, quantity_keyboard
from bot.services.colab_integration import generate_sticker
from bot.handlers.states import StickerGeneration
from aiogram.types import BufferedInputFile
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    datefmt="%Y-%m-%d %H:%M:%S",
)

router = Router()

@router.message(Command("generate"))
async def start_generation(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=style_keyboard())
    await state.set_state(StickerGeneration.select_style)


@router.message(StateFilter(StickerGeneration.select_style))
async def select_style(message: types.Message, state: FSMContext):
    style = message.text.lower()
    if style not in ["–∞–Ω–∏–º–µ", "—Ä–µ–∞–ª–∏–∑–º", "—á–∏–±–∏", "—Ñ—ç–Ω—Ç–µ–∑–∏"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(style=style)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å: {style}. –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
    await state.set_state(StickerGeneration.enter_prompt)


@router.message(StateFilter(StickerGeneration.enter_prompt))
async def enter_prompt(message: types.Message, state: FSMContext):
    prompt = message.text
    await state.update_data(prompt=prompt)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=background_keyboard())
    await state.set_state(StickerGeneration.select_background)


@router.message(StateFilter(StickerGeneration.select_background))
async def select_background(message: types.Message, state: FSMContext):
    background = message.text.lower()
    if background not in ["—Å —Ñ–æ–Ω–æ–º", "–±–µ–∑ —Ñ–æ–Ω–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: '–° —Ñ–æ–Ω–æ–º' –∏–ª–∏ '–ë–µ–∑ —Ñ–æ–Ω–∞'.")
        return

    await state.update_data(background=background)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=quantity_keyboard())
    await state.set_state(StickerGeneration.select_quantity)


@router.message(StateFilter(StickerGeneration.select_quantity))
async def select_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) not in [1, 3, 5]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1, 3 –∏–ª–∏ 5.")
        return

    quantity = int(message.text)
    await state.update_data(quantity=quantity)

    await message.answer("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Å—Ç–∏–∫–µ—Ä–µ:")
    await state.set_state(StickerGeneration.enter_prompt)


@router.message(StateFilter(StickerGeneration.enter_prompt))
async def generate(message: types.Message, state: FSMContext):
    data = await state.get_data()

    style = data.get("style", "–∞–Ω–∏–º–µ")
    background = data.get("background", "—Å —Ñ–æ–Ω–æ–º")
    quantity = data.get("quantity", 1)
    prompt = data.get("prompt", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏–∫–µ—Ä—ã...")

    try:
        stickers = generate_sticker(prompt, style, background, quantity)

        for i, sticker in enumerate(stickers):
            file = BufferedInputFile(sticker.getvalue(), filename=f"sticker_{i + 1}.webp")
            await message.answer_photo(photo=file, caption=f"–°—Ç–∏–ª—å: {style}\n–û–ø–∏—Å–∞–Ω–∏–µ: {prompt}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await state.clear()